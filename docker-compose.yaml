version: '3.5'

# USING DOCKER COMPOSE assuming the containers were built (local):

# 1. initialize the network and create the containers:

# ```bash
# docker-compose up --no-start
# ```

# 2. initialize the orderers:

# ```bash
# docker-compose start orderer0 orderer1 orderer2 orderer3
# ```

# 3. download the ccenv (BUGFIX):

# ```bash
# docker-compose start ccenv
# ```

# 4. start frontends

# ```bash
# docker-compose start frontend1000 frontend2000
# ```

# 5. start peers and the rest of the system and attach the log output

# ```bash
# docker-compose up
# ```

networks:
  bft_network:
    name: bft_network
    driver: bridge

services:

  orderer0:
    container_name: bft.node.0
    image: bftsmart/fabric-orderingnode:amd64-1.3.0 
    networks: 
      - bft_network
    command: '0'

  orderer1:
    container_name: bft.node.1
    image: bftsmart/fabric-orderingnode:amd64-1.3.0 
    networks: 
      - bft_network
    command: '1'
    depends_on: 
      - orderer0

  orderer2:
    container_name: bft.node.2
    image: bftsmart/fabric-orderingnode:amd64-1.3.0 
    networks: 
      - bft_network
    command: '2'
    depends_on: 
      - orderer1

  orderer3:
    container_name: bft.node.3
    image: bftsmart/fabric-orderingnode:amd64-1.3.0 
    networks: 
      - bft_network
    command: '3'
    depends_on: 
      - orderer2


#------------------------------------------------------------------------
  frontend1000:
    container_name: bft.frontend.1000
    image: bftsmart/fabric-frontend:amd64-1.3.0 
    networks: 
      - bft_network
    command: '1000'
    depends_on: 
      - orderer0
      - orderer1
      - orderer2
      - orderer3

  frontend2000:
    container_name: bft.frontend.2000
    image: bftsmart/fabric-frontend:amd64-1.3.0 
    networks: 
      - bft_network
    command: '2000'
    depends_on: 
      - orderer0
      - orderer1
      - orderer2
      - orderer3
#------------------------------------------------------------------------
  peer0:
    container_name: bft.peer.0
    image: bftsmart/fabric-peer:amd64-1.3.0 
    networks: 
      - bft_network
    depends_on: 
      - frontend1000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes


  peer1:
    container_name: bft.peer.1
    image: bftsmart/fabric-peer:amd64-1.3.0 
    networks: 
      - bft_network
    depends_on: 
      - frontend2000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  # this is a hack to handle a bug with fabric. peers require ccenv:latest to initiate the channel
  # this service only run in preparation to ensure that the correct version is available and it is
  # re-tagged to latest as required.
  ccenv:
      image:  docker
      command: sh -c 'docker pull hyperledger/fabric-ccenv:amd64-1.3.0  && docker image tag hyperledger/fabric-ccenv:amd64-1.3.0 hyperledger/fabric-ccenv:latest'
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      networks: 
        - bft_network
